function [kp_value, test_data] = parseDataFile(filepath)
% Parses a single data file generated by the Arduino script.
%
% Args:
%   filepath (char): The path to the .txt data file.
%
% Returns:
%   kp_value (double): The proportional gain (Kp) found in the file.
%   test_data (containers.Map): A map where keys are step magnitudes
%     and values are cell arrays of tables, with each table holding the
%     data for one replicate.

    % Initialize return values
    kp_value = [];
    test_data = containers.Map('KeyType', 'double', 'ValueType', 'any');

    % Read the entire file content into a single string.
    try
        content = fileread(filepath);
    catch ME
        warning('Could not read file %s: %s', filepath, ME.message);
        return;
    end
    
    % Find the Kp value using a regular expression.
    kp_token = regexp(content, 'Proportional Gain \(Kp\) = ([-+]?\d*\.?\d+)', 'tokens', 'once');
    if isempty(kp_token)
        return; % Kp not found, cannot proceed.
    end
    kp_value = str2double(kp_token{1});

    % Split the file content by the start of each new test.
    test_blocks = strsplit(content, 'NEW TEST STARTED -> ');
    
    % Start from the second block since the first is just the file header.
    for i = 2:length(test_blocks)
        block = test_blocks{i};
        
        % Find the step magnitude for the current block.
        mag_token = regexp(block, 'STEP MAGNITUDE: ([-+]?\d*\.?\d+)', 'tokens', 'once');
        
        % If it's not a step magnitude test, skip this block.
        if isempty(mag_token)
            continue;
        end
        magnitude = str2double(mag_token{1});
        
        % Find the start of the CSV data.
        header = 'Time (ms),Original Ref (V or rad),Final Ref (V or rad),Angle (rad),Raw Sensor';
        data_start_idx = strfind(block, header);
        
        if isempty(data_start_idx)
            continue;
        end
        
        % Extract the substring containing only the numerical data.
        data_str = block(data_start_idx + length(header):end);
        
        % Find the end of the data block, marked by '==='.
        data_end_idx = strfind(data_str, '===');
        if ~isempty(data_end_idx)
            data_str = data_str(1:data_end_idx(1)-1);
        end
        
        % Use textscan for efficient parsing of the CSV data string.
        data_cell = textscan(data_str, '%f %f %f %f %f', 'Delimiter', ',');
        
        if isempty(data_cell{1})
            continue; % Skip if no data was parsed
        end

        % Convert the parsed cell array into a table with named columns.
        data_table = table(data_cell{1}, data_cell{2}, data_cell{3}, data_cell{4}, data_cell{5}, ...
            'VariableNames', {'Time_ms', 'OriginalRef_V_or_rad', 'FinalRef_V_or_rad', 'Angle_rad', 'RawSensor'});

        % Store the resulting table in the map.
        if isKey(test_data, magnitude)
            % If this magnitude already exists, append this replicate.
            test_data(magnitude) = [test_data(magnitude), {data_table}];
        else
            % Otherwise, create a new entry.
            test_data(magnitude) = {data_table};
        end
    end
end
